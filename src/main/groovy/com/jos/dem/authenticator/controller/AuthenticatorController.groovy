package com.jos.dem.authenticator.controller

import org.springframework.web.bind.annotation.RestController
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.PathVariable
import org.springframework.web.bind.annotation.ResponseStatus
import org.springframework.web.bind.annotation.ExceptionHandler
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import io.swagger.annotations.Api
import io.swagger.annotations.ApiImplicitParam
import io.swagger.annotations.ApiImplicitParams

import com.jos.dem.authenticator.service.AuthenticatorService
import com.jos.dem.authenticator.exception.BusinessException

@Api(description="Knows how generate keys and validate tokens")
@RestController
class AuthenticatorController {

  @Autowired
  AuthenticatorService service

  @RequestMapping("generateKey")
  String generateKey(){
    service.generateKey()
  }

  @ApiImplicitParams([
  @ApiImplicitParam(name = "key", value = "key from generateKey service", required = true, dataType = "string", paramType = "query"),
  @ApiImplicitParam(name = "token", value = "token generated by Google Authenticator", required = true, dataType = "string", paramType = "query")
  ])
  @RequestMapping("validateToken/{key}/{token}")
  ResponseEntity<String> validateToken(@PathVariable String key, @PathVariable Integer token){
    service.isValidToken(key, token)
    return new ResponseEntity<String>("OK", HttpStatus.OK)
  }

  @ResponseStatus(value=HttpStatus.UNAUTHORIZED, reason="Unauthorized")
  @ExceptionHandler(BusinessException.class)
  ResponseEntity<String> handleException(BusinessException be){
    return new ResponseEntity<String>("Unauthorized", HttpStatus.UNAUTHORIZED)
  }

}

